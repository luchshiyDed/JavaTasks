/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.AircraftsDataRecord;
import D6.Entities.Keys;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Aircrafts (internal data)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AircraftsData extends TableImpl<AircraftsDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.aircrafts_data</code>
     */
    public static final AircraftsData AIRCRAFTS_DATA = new AircraftsData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AircraftsDataRecord> getRecordType() {
        return AircraftsDataRecord.class;
    }

    /**
     * The column <code>bookings.aircrafts_data.aircraft_code</code>. Aircraft
     * code, IATA
     */
    public final TableField<AircraftsDataRecord, String> AIRCRAFT_CODE = createField(DSL.name("aircraft_code"), SQLDataType.CHAR(3).nullable(false), this, "Aircraft code, IATA");

    /**
     * The column <code>bookings.aircrafts_data.model</code>. Aircraft model
     */
    public final TableField<AircraftsDataRecord, JSONB> MODEL = createField(DSL.name("model"), SQLDataType.JSONB.nullable(false), this, "Aircraft model");

    /**
     * The column <code>bookings.aircrafts_data.range</code>. Maximal flying
     * distance, km
     */
    public final TableField<AircraftsDataRecord, Integer> RANGE = createField(DSL.name("range"), SQLDataType.INTEGER.nullable(false), this, "Maximal flying distance, km");

    private AircraftsData(Name alias, Table<AircraftsDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private AircraftsData(Name alias, Table<AircraftsDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Aircrafts (internal data)"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bookings.aircrafts_data</code> table reference
     */
    public AircraftsData(String alias) {
        this(DSL.name(alias), AIRCRAFTS_DATA);
    }

    /**
     * Create an aliased <code>bookings.aircrafts_data</code> table reference
     */
    public AircraftsData(Name alias) {
        this(alias, AIRCRAFTS_DATA);
    }

    /**
     * Create a <code>bookings.aircrafts_data</code> table reference
     */
    public AircraftsData() {
        this(DSL.name("aircrafts_data"), null);
    }

    public <O extends Record> AircraftsData(Table<O> child, ForeignKey<O, AircraftsDataRecord> key) {
        super(child, key, AIRCRAFTS_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public UniqueKey<AircraftsDataRecord> getPrimaryKey() {
        return Keys.AIRCRAFTS_PKEY;
    }

    @Override
    public List<Check<AircraftsDataRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("aircrafts_range_check"), "((range > 0))", true)
        );
    }

    @Override
    public AircraftsData as(String alias) {
        return new AircraftsData(DSL.name(alias), this);
    }

    @Override
    public AircraftsData as(Name alias) {
        return new AircraftsData(alias, this);
    }

    @Override
    public AircraftsData as(Table<?> alias) {
        return new AircraftsData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AircraftsData rename(String name) {
        return new AircraftsData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AircraftsData rename(Name name) {
        return new AircraftsData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AircraftsData rename(Table<?> name) {
        return new AircraftsData(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, JSONB, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super JSONB, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super JSONB, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
