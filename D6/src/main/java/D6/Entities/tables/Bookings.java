/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.tables.records.BookingsRecord;
import D6.Entities.Keys;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Bookings
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bookings extends TableImpl<BookingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.bookings</code>
     */
    public static final Bookings BOOKINGS_ = new Bookings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookingsRecord> getRecordType() {
        return BookingsRecord.class;
    }

    /**
     * The column <code>bookings.bookings.book_ref</code>. Booking number
     */
    public final TableField<BookingsRecord, String> BOOK_REF = createField(DSL.name("book_ref"), SQLDataType.CHAR(6).nullable(false), this, "Booking number");

    /**
     * The column <code>bookings.bookings.book_date</code>. Booking date
     */
    public final TableField<BookingsRecord, OffsetDateTime> BOOK_DATE = createField(DSL.name("book_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Booking date");

    /**
     * The column <code>bookings.bookings.total_amount</code>. Total booking
     * cost
     */
    public final TableField<BookingsRecord, BigDecimal> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "Total booking cost");

    private Bookings(Name alias, Table<BookingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bookings(Name alias, Table<BookingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Bookings"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bookings.bookings</code> table reference
     */
    public Bookings(String alias) {
        this(DSL.name(alias), BOOKINGS_);
    }

    /**
     * Create an aliased <code>bookings.bookings</code> table reference
     */
    public Bookings(Name alias) {
        this(alias, BOOKINGS_);
    }

    /**
     * Create a <code>bookings.bookings</code> table reference
     */
    public Bookings() {
        this(DSL.name("bookings"), null);
    }

    public <O extends Record> Bookings(Table<O> child, ForeignKey<O, BookingsRecord> key) {
        super(child, key, BOOKINGS_);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : D6.Entities.Bookings.BOOKINGS;
    }

    @Override
    public UniqueKey<BookingsRecord> getPrimaryKey() {
        return Keys.BOOKINGS_PKEY;
    }

    @Override
    public Bookings as(String alias) {
        return new Bookings(DSL.name(alias), this);
    }

    @Override
    public Bookings as(Name alias) {
        return new Bookings(alias, this);
    }

    @Override
    public Bookings as(Table<?> alias) {
        return new Bookings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookings rename(String name) {
        return new Bookings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookings rename(Name name) {
        return new Bookings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookings rename(Table<?> name) {
        return new Bookings(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, OffsetDateTime, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super OffsetDateTime, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super OffsetDateTime, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
