/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.FlightsVRecord;

import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function20;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;


/**
 * Flights (extended)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlightsV extends TableImpl<FlightsVRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.flights_v</code>
     */
    public static final FlightsV FLIGHTS_V = new FlightsV();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlightsVRecord> getRecordType() {
        return FlightsVRecord.class;
    }

    /**
     * The column <code>bookings.flights_v.flight_id</code>. Flight ID
     */
    public final TableField<FlightsVRecord, Integer> FLIGHT_ID = createField(DSL.name("flight_id"), SQLDataType.INTEGER, this, "Flight ID");

    /**
     * The column <code>bookings.flights_v.flight_no</code>. Flight number
     */
    public final TableField<FlightsVRecord, String> FLIGHT_NO = createField(DSL.name("flight_no"), SQLDataType.CHAR(6), this, "Flight number");

    /**
     * The column <code>bookings.flights_v.scheduled_departure</code>. Scheduled
     * departure time
     */
    public final TableField<FlightsVRecord, OffsetDateTime> SCHEDULED_DEPARTURE = createField(DSL.name("scheduled_departure"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Scheduled departure time");

    /**
     * The column <code>bookings.flights_v.scheduled_departure_local</code>.
     * Scheduled departure time, local time at the point of departure
     */
    public final TableField<FlightsVRecord, LocalDateTime> SCHEDULED_DEPARTURE_LOCAL = createField(DSL.name("scheduled_departure_local"), SQLDataType.LOCALDATETIME(6), this, "Scheduled departure time, local time at the point of departure");

    /**
     * The column <code>bookings.flights_v.scheduled_arrival</code>. Scheduled
     * arrival time
     */
    public final TableField<FlightsVRecord, OffsetDateTime> SCHEDULED_ARRIVAL = createField(DSL.name("scheduled_arrival"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Scheduled arrival time");

    /**
     * The column <code>bookings.flights_v.scheduled_arrival_local</code>.
     * Scheduled arrival time, local time at the point of destination
     */
    public final TableField<FlightsVRecord, LocalDateTime> SCHEDULED_ARRIVAL_LOCAL = createField(DSL.name("scheduled_arrival_local"), SQLDataType.LOCALDATETIME(6), this, "Scheduled arrival time, local time at the point of destination");

    /**
     * The column <code>bookings.flights_v.scheduled_duration</code>. Scheduled
     * flight duration
     */
    public final TableField<FlightsVRecord, YearToSecond> SCHEDULED_DURATION = createField(DSL.name("scheduled_duration"), SQLDataType.INTERVAL, this, "Scheduled flight duration");

    /**
     * The column <code>bookings.flights_v.departure_airport</code>. Deprature
     * airport code
     */
    public final TableField<FlightsVRecord, String> DEPARTURE_AIRPORT = createField(DSL.name("departure_airport"), SQLDataType.CHAR(3), this, "Deprature airport code");

    /**
     * The column <code>bookings.flights_v.departure_airport_name</code>.
     * Departure airport name
     */
    public final TableField<FlightsVRecord, String> DEPARTURE_AIRPORT_NAME = createField(DSL.name("departure_airport_name"), SQLDataType.CLOB, this, "Departure airport name");

    /**
     * The column <code>bookings.flights_v.departure_city</code>. City of
     * departure
     */
    public final TableField<FlightsVRecord, String> DEPARTURE_CITY = createField(DSL.name("departure_city"), SQLDataType.CLOB, this, "City of departure");

    /**
     * The column <code>bookings.flights_v.arrival_airport</code>. Arrival
     * airport code
     */
    public final TableField<FlightsVRecord, String> ARRIVAL_AIRPORT = createField(DSL.name("arrival_airport"), SQLDataType.CHAR(3), this, "Arrival airport code");

    /**
     * The column <code>bookings.flights_v.arrival_airport_name</code>. Arrival
     * airport name
     */
    public final TableField<FlightsVRecord, String> ARRIVAL_AIRPORT_NAME = createField(DSL.name("arrival_airport_name"), SQLDataType.CLOB, this, "Arrival airport name");

    /**
     * The column <code>bookings.flights_v.arrival_city</code>. City of arrival
     */
    public final TableField<FlightsVRecord, String> ARRIVAL_CITY = createField(DSL.name("arrival_city"), SQLDataType.CLOB, this, "City of arrival");

    /**
     * The column <code>bookings.flights_v.status</code>. Flight status
     */
    public final TableField<FlightsVRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20), this, "Flight status");

    /**
     * The column <code>bookings.flights_v.aircraft_code</code>. Aircraft code,
     * IATA
     */
    public final TableField<FlightsVRecord, String> AIRCRAFT_CODE = createField(DSL.name("aircraft_code"), SQLDataType.CHAR(3), this, "Aircraft code, IATA");

    /**
     * The column <code>bookings.flights_v.actual_departure</code>. Actual
     * departure time
     */
    public final TableField<FlightsVRecord, OffsetDateTime> ACTUAL_DEPARTURE = createField(DSL.name("actual_departure"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Actual departure time");

    /**
     * The column <code>bookings.flights_v.actual_departure_local</code>. Actual
     * departure time, local time at the point of departure
     */
    public final TableField<FlightsVRecord, LocalDateTime> ACTUAL_DEPARTURE_LOCAL = createField(DSL.name("actual_departure_local"), SQLDataType.LOCALDATETIME(6), this, "Actual departure time, local time at the point of departure");

    /**
     * The column <code>bookings.flights_v.actual_arrival</code>. Actual arrival
     * time
     */
    public final TableField<FlightsVRecord, OffsetDateTime> ACTUAL_ARRIVAL = createField(DSL.name("actual_arrival"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Actual arrival time");

    /**
     * The column <code>bookings.flights_v.actual_arrival_local</code>. Actual
     * arrival time, local time at the point of destination
     */
    public final TableField<FlightsVRecord, LocalDateTime> ACTUAL_ARRIVAL_LOCAL = createField(DSL.name("actual_arrival_local"), SQLDataType.LOCALDATETIME(6), this, "Actual arrival time, local time at the point of destination");

    /**
     * The column <code>bookings.flights_v.actual_duration</code>. Actual flight
     * duration
     */
    public final TableField<FlightsVRecord, YearToSecond> ACTUAL_DURATION = createField(DSL.name("actual_duration"), SQLDataType.INTERVAL, this, "Actual flight duration");

    private FlightsV(Name alias, Table<FlightsVRecord> aliased) {
        this(alias, aliased, null);
    }

    private FlightsV(Name alias, Table<FlightsVRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Flights (extended)"), TableOptions.view("""
        create view "flights_v" as  SELECT f.flight_id,
          f.flight_no,
          f.scheduled_departure,
          timezone(dep.timezone, f.scheduled_departure) AS scheduled_departure_local,
          f.scheduled_arrival,
          timezone(arr.timezone, f.scheduled_arrival) AS scheduled_arrival_local,
          (f.scheduled_arrival - f.scheduled_departure) AS scheduled_duration,
          f.departure_airport,
          dep.airport_name AS departure_airport_name,
          dep.city AS departure_city,
          f.arrival_airport,
          arr.airport_name AS arrival_airport_name,
          arr.city AS arrival_city,
          f.status,
          f.aircraft_code,
          f.actual_departure,
          timezone(dep.timezone, f.actual_departure) AS actual_departure_local,
          f.actual_arrival,
          timezone(arr.timezone, f.actual_arrival) AS actual_arrival_local,
          (f.actual_arrival - f.actual_departure) AS actual_duration
         FROM flights f,
          airports dep,
          airports arr
        WHERE ((f.departure_airport = dep.airport_code) AND (f.arrival_airport = arr.airport_code));
        """));
    }

    /**
     * Create an aliased <code>bookings.flights_v</code> table reference
     */
    public FlightsV(String alias) {
        this(DSL.name(alias), FLIGHTS_V);
    }

    /**
     * Create an aliased <code>bookings.flights_v</code> table reference
     */
    public FlightsV(Name alias) {
        this(alias, FLIGHTS_V);
    }

    /**
     * Create a <code>bookings.flights_v</code> table reference
     */
    public FlightsV() {
        this(DSL.name("flights_v"), null);
    }

    public <O extends Record> FlightsV(Table<O> child, ForeignKey<O, FlightsVRecord> key) {
        super(child, key, FLIGHTS_V);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public FlightsV as(String alias) {
        return new FlightsV(DSL.name(alias), this);
    }

    @Override
    public FlightsV as(Name alias) {
        return new FlightsV(alias, this);
    }

    @Override
    public FlightsV as(Table<?> alias) {
        return new FlightsV(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FlightsV rename(String name) {
        return new FlightsV(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlightsV rename(Name name) {
        return new FlightsV(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlightsV rename(Table<?> name) {
        return new FlightsV(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Integer, String, OffsetDateTime, LocalDateTime, OffsetDateTime, LocalDateTime, YearToSecond, String, String, String, String, String, String, String, String, OffsetDateTime, LocalDateTime, OffsetDateTime, LocalDateTime, YearToSecond> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function20<? super Integer, ? super String, ? super OffsetDateTime, ? super LocalDateTime, ? super OffsetDateTime, ? super LocalDateTime, ? super YearToSecond, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super LocalDateTime, ? super OffsetDateTime, ? super LocalDateTime, ? super YearToSecond, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function20<? super Integer, ? super String, ? super OffsetDateTime, ? super LocalDateTime, ? super OffsetDateTime, ? super LocalDateTime, ? super YearToSecond, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super LocalDateTime, ? super OffsetDateTime, ? super LocalDateTime, ? super YearToSecond, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
