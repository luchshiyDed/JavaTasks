/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.SeatsRecord;
import D6.Entities.Keys;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Seats
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Seats extends TableImpl<SeatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.seats</code>
     */
    public static final Seats SEATS = new Seats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeatsRecord> getRecordType() {
        return SeatsRecord.class;
    }

    /**
     * The column <code>bookings.seats.aircraft_code</code>. Aircraft code, IATA
     */
    public final TableField<SeatsRecord, String> AIRCRAFT_CODE = createField(DSL.name("aircraft_code"), SQLDataType.CHAR(3).nullable(false), this, "Aircraft code, IATA");

    /**
     * The column <code>bookings.seats.seat_no</code>. Seat number
     */
    public final TableField<SeatsRecord, String> SEAT_NO = createField(DSL.name("seat_no"), SQLDataType.VARCHAR(4).nullable(false), this, "Seat number");

    /**
     * The column <code>bookings.seats.fare_conditions</code>. Travel class
     */
    public final TableField<SeatsRecord, String> FARE_CONDITIONS = createField(DSL.name("fare_conditions"), SQLDataType.VARCHAR(10).nullable(false), this, "Travel class");

    private Seats(Name alias, Table<SeatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Seats(Name alias, Table<SeatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Seats"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bookings.seats</code> table reference
     */
    public Seats(String alias) {
        this(DSL.name(alias), SEATS);
    }

    /**
     * Create an aliased <code>bookings.seats</code> table reference
     */
    public Seats(Name alias) {
        this(alias, SEATS);
    }

    /**
     * Create a <code>bookings.seats</code> table reference
     */
    public Seats() {
        this(DSL.name("seats"), null);
    }

    public <O extends Record> Seats(Table<O> child, ForeignKey<O, SeatsRecord> key) {
        super(child, key, SEATS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public UniqueKey<SeatsRecord> getPrimaryKey() {
        return Keys.SEATS_PKEY;
    }

    @Override
    public List<ForeignKey<SeatsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEATS__SEATS_AIRCRAFT_CODE_FKEY);
    }

    private transient AircraftsData _aircraftsData;

    /**
     * Get the implicit join path to the <code>bookings.aircrafts_data</code>
     * table.
     */
    public AircraftsData aircraftsData() {
        if (_aircraftsData == null)
            _aircraftsData = new AircraftsData(this, Keys.SEATS__SEATS_AIRCRAFT_CODE_FKEY);

        return _aircraftsData;
    }

    @Override
    public List<Check<SeatsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("seats_fare_conditions_check"), "(((fare_conditions)::text = ANY (ARRAY[('Economy'::character varying)::text, ('Comfort'::character varying)::text, ('Business'::character varying)::text])))", true)
        );
    }

    @Override
    public Seats as(String alias) {
        return new Seats(DSL.name(alias), this);
    }

    @Override
    public Seats as(Name alias) {
        return new Seats(alias, this);
    }

    @Override
    public Seats as(Table<?> alias) {
        return new Seats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Seats rename(String name) {
        return new Seats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Seats rename(Name name) {
        return new Seats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Seats rename(Table<?> name) {
        return new Seats(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
