/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.TicketFlightsRecord;
import D6.Entities.Keys;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Flight segment
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketFlights extends TableImpl<TicketFlightsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.ticket_flights</code>
     */
    public static final TicketFlights TICKET_FLIGHTS = new TicketFlights();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketFlightsRecord> getRecordType() {
        return TicketFlightsRecord.class;
    }

    /**
     * The column <code>bookings.ticket_flights.ticket_no</code>. Ticket number
     */
    public final TableField<TicketFlightsRecord, String> TICKET_NO = createField(DSL.name("ticket_no"), SQLDataType.CHAR(13).nullable(false), this, "Ticket number");

    /**
     * The column <code>bookings.ticket_flights.flight_id</code>. Flight ID
     */
    public final TableField<TicketFlightsRecord, Integer> FLIGHT_ID = createField(DSL.name("flight_id"), SQLDataType.INTEGER.nullable(false), this, "Flight ID");

    /**
     * The column <code>bookings.ticket_flights.fare_conditions</code>. Travel
     * class
     */
    public final TableField<TicketFlightsRecord, String> FARE_CONDITIONS = createField(DSL.name("fare_conditions"), SQLDataType.VARCHAR(10).nullable(false), this, "Travel class");

    /**
     * The column <code>bookings.ticket_flights.amount</code>. Travel cost
     */
    public final TableField<TicketFlightsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "Travel cost");

    private TicketFlights(Name alias, Table<TicketFlightsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TicketFlights(Name alias, Table<TicketFlightsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Flight segment"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bookings.ticket_flights</code> table reference
     */
    public TicketFlights(String alias) {
        this(DSL.name(alias), TICKET_FLIGHTS);
    }

    /**
     * Create an aliased <code>bookings.ticket_flights</code> table reference
     */
    public TicketFlights(Name alias) {
        this(alias, TICKET_FLIGHTS);
    }

    /**
     * Create a <code>bookings.ticket_flights</code> table reference
     */
    public TicketFlights() {
        this(DSL.name("ticket_flights"), null);
    }

    public <O extends Record> TicketFlights(Table<O> child, ForeignKey<O, TicketFlightsRecord> key) {
        super(child, key, TICKET_FLIGHTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public UniqueKey<TicketFlightsRecord> getPrimaryKey() {
        return Keys.TICKET_FLIGHTS_PKEY;
    }

    @Override
    public List<ForeignKey<TicketFlightsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TICKET_FLIGHTS__TICKET_FLIGHTS_TICKET_NO_FKEY, Keys.TICKET_FLIGHTS__TICKET_FLIGHTS_FLIGHT_ID_FKEY);
    }

    private transient Tickets _tickets;
    private transient Flights _flights;

    /**
     * Get the implicit join path to the <code>bookings.tickets</code> table.
     */
    public Tickets tickets() {
        if (_tickets == null)
            _tickets = new Tickets(this, Keys.TICKET_FLIGHTS__TICKET_FLIGHTS_TICKET_NO_FKEY);

        return _tickets;
    }

    /**
     * Get the implicit join path to the <code>bookings.flights</code> table.
     */
    public Flights flights() {
        if (_flights == null)
            _flights = new Flights(this, Keys.TICKET_FLIGHTS__TICKET_FLIGHTS_FLIGHT_ID_FKEY);

        return _flights;
    }

    @Override
    public List<Check<TicketFlightsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("ticket_flights_amount_check"), "((amount >= (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("ticket_flights_fare_conditions_check"), "(((fare_conditions)::text = ANY (ARRAY[('Economy'::character varying)::text, ('Comfort'::character varying)::text, ('Business'::character varying)::text])))", true)
        );
    }

    @Override
    public TicketFlights as(String alias) {
        return new TicketFlights(DSL.name(alias), this);
    }

    @Override
    public TicketFlights as(Name alias) {
        return new TicketFlights(alias, this);
    }

    @Override
    public TicketFlights as(Table<?> alias) {
        return new TicketFlights(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketFlights rename(String name) {
        return new TicketFlights(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketFlights rename(Name name) {
        return new TicketFlights(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TicketFlights rename(Table<?> name) {
        return new TicketFlights(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super Integer, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super Integer, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
