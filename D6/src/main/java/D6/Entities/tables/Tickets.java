/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.TicketsRecord;
import D6.Entities.Keys;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Tickets
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tickets extends TableImpl<TicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketsRecord> getRecordType() {
        return TicketsRecord.class;
    }

    /**
     * The column <code>bookings.tickets.ticket_no</code>. Ticket number
     */
    public final TableField<TicketsRecord, String> TICKET_NO = createField(DSL.name("ticket_no"), SQLDataType.CHAR(13).nullable(false), this, "Ticket number");

    /**
     * The column <code>bookings.tickets.book_ref</code>. Booking number
     */
    public final TableField<TicketsRecord, String> BOOK_REF = createField(DSL.name("book_ref"), SQLDataType.CHAR(6).nullable(false), this, "Booking number");

    /**
     * The column <code>bookings.tickets.passenger_id</code>. Passenger ID
     */
    public final TableField<TicketsRecord, String> PASSENGER_ID = createField(DSL.name("passenger_id"), SQLDataType.VARCHAR(20).nullable(false), this, "Passenger ID");

    /**
     * The column <code>bookings.tickets.passenger_name</code>. Passenger name
     */
    public final TableField<TicketsRecord, String> PASSENGER_NAME = createField(DSL.name("passenger_name"), SQLDataType.CLOB.nullable(false), this, "Passenger name");

    /**
     * The column <code>bookings.tickets.contact_data</code>. Passenger contact
     * information
     */
    public final TableField<TicketsRecord, JSONB> CONTACT_DATA = createField(DSL.name("contact_data"), SQLDataType.JSONB, this, "Passenger contact information");

    private Tickets(Name alias, Table<TicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Tickets"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bookings.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>bookings.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    /**
     * Create a <code>bookings.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    public <O extends Record> Tickets(Table<O> child, ForeignKey<O, TicketsRecord> key) {
        super(child, key, TICKETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public UniqueKey<TicketsRecord> getPrimaryKey() {
        return Keys.TICKETS_PKEY;
    }

    @Override
    public List<ForeignKey<TicketsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TICKETS__TICKETS_BOOK_REF_FKEY);
    }

    private transient D6.Entities.tables.Bookings _bookings;

    /**
     * Get the implicit join path to the <code>bookings.bookings</code> table.
     */
    public D6.Entities.tables.Bookings bookings() {
        if (_bookings == null)
            _bookings = new D6.Entities.tables.Bookings(this, Keys.TICKETS__TICKETS_BOOK_REF_FKEY);

        return _bookings;
    }

    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    @Override
    public Tickets as(Table<?> alias) {
        return new Tickets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Table<?> name) {
        return new Tickets(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, JSONB> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super JSONB, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super JSONB, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
