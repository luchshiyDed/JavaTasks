/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.BoardingPassesRecord;
import D6.Entities.Keys;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Boarding passes
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoardingPasses extends TableImpl<BoardingPassesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.boarding_passes</code>
     */
    public static final BoardingPasses BOARDING_PASSES = new BoardingPasses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoardingPassesRecord> getRecordType() {
        return BoardingPassesRecord.class;
    }

    /**
     * The column <code>bookings.boarding_passes.ticket_no</code>. Ticket number
     */
    public final TableField<BoardingPassesRecord, String> TICKET_NO = createField(DSL.name("ticket_no"), SQLDataType.CHAR(13).nullable(false), this, "Ticket number");

    /**
     * The column <code>bookings.boarding_passes.flight_id</code>. Flight ID
     */
    public final TableField<BoardingPassesRecord, Integer> FLIGHT_ID = createField(DSL.name("flight_id"), SQLDataType.INTEGER.nullable(false), this, "Flight ID");

    /**
     * The column <code>bookings.boarding_passes.boarding_no</code>. Boarding
     * pass number
     */
    public final TableField<BoardingPassesRecord, Integer> BOARDING_NO = createField(DSL.name("boarding_no"), SQLDataType.INTEGER.nullable(false), this, "Boarding pass number");

    /**
     * The column <code>bookings.boarding_passes.seat_no</code>. Seat number
     */
    public final TableField<BoardingPassesRecord, String> SEAT_NO = createField(DSL.name("seat_no"), SQLDataType.VARCHAR(4).nullable(false), this, "Seat number");

    private BoardingPasses(Name alias, Table<BoardingPassesRecord> aliased) {
        this(alias, aliased, null);
    }

    private BoardingPasses(Name alias, Table<BoardingPassesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Boarding passes"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bookings.boarding_passes</code> table reference
     */
    public BoardingPasses(String alias) {
        this(DSL.name(alias), BOARDING_PASSES);
    }

    /**
     * Create an aliased <code>bookings.boarding_passes</code> table reference
     */
    public BoardingPasses(Name alias) {
        this(alias, BOARDING_PASSES);
    }

    /**
     * Create a <code>bookings.boarding_passes</code> table reference
     */
    public BoardingPasses() {
        this(DSL.name("boarding_passes"), null);
    }

    public <O extends Record> BoardingPasses(Table<O> child, ForeignKey<O, BoardingPassesRecord> key) {
        super(child, key, BOARDING_PASSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public UniqueKey<BoardingPassesRecord> getPrimaryKey() {
        return Keys.BOARDING_PASSES_PKEY;
    }

    @Override
    public List<UniqueKey<BoardingPassesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BOARDING_PASSES_FLIGHT_ID_BOARDING_NO_KEY, Keys.BOARDING_PASSES_FLIGHT_ID_SEAT_NO_KEY);
    }

    @Override
    public List<ForeignKey<BoardingPassesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOARDING_PASSES__BOARDING_PASSES_TICKET_NO_FKEY);
    }

    private transient TicketFlights _ticketFlights;

    /**
     * Get the implicit join path to the <code>bookings.ticket_flights</code>
     * table.
     */
    public TicketFlights ticketFlights() {
        if (_ticketFlights == null)
            _ticketFlights = new TicketFlights(this, Keys.BOARDING_PASSES__BOARDING_PASSES_TICKET_NO_FKEY);

        return _ticketFlights;
    }

    @Override
    public BoardingPasses as(String alias) {
        return new BoardingPasses(DSL.name(alias), this);
    }

    @Override
    public BoardingPasses as(Name alias) {
        return new BoardingPasses(alias, this);
    }

    @Override
    public BoardingPasses as(Table<?> alias) {
        return new BoardingPasses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardingPasses rename(String name) {
        return new BoardingPasses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardingPasses rename(Name name) {
        return new BoardingPasses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardingPasses rename(Table<?> name) {
        return new BoardingPasses(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
