/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.FlightsRecord;
import D6.Entities.Keys;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Flights
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flights extends TableImpl<FlightsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.flights</code>
     */
    public static final Flights FLIGHTS = new Flights();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlightsRecord> getRecordType() {
        return FlightsRecord.class;
    }

    /**
     * The column <code>bookings.flights.flight_id</code>. Flight ID
     */
    public final TableField<FlightsRecord, Integer> FLIGHT_ID = createField(DSL.name("flight_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Flight ID");

    /**
     * The column <code>bookings.flights.flight_no</code>. Flight number
     */
    public final TableField<FlightsRecord, String> FLIGHT_NO = createField(DSL.name("flight_no"), SQLDataType.CHAR(6).nullable(false), this, "Flight number");

    /**
     * The column <code>bookings.flights.scheduled_departure</code>. Scheduled
     * departure time
     */
    public final TableField<FlightsRecord, OffsetDateTime> SCHEDULED_DEPARTURE = createField(DSL.name("scheduled_departure"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Scheduled departure time");

    /**
     * The column <code>bookings.flights.scheduled_arrival</code>. Scheduled
     * arrival time
     */
    public final TableField<FlightsRecord, OffsetDateTime> SCHEDULED_ARRIVAL = createField(DSL.name("scheduled_arrival"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "Scheduled arrival time");

    /**
     * The column <code>bookings.flights.departure_airport</code>. Airport of
     * departure
     */
    public final TableField<FlightsRecord, String> DEPARTURE_AIRPORT = createField(DSL.name("departure_airport"), SQLDataType.CHAR(3).nullable(false), this, "Airport of departure");

    /**
     * The column <code>bookings.flights.arrival_airport</code>. Airport of
     * arrival
     */
    public final TableField<FlightsRecord, String> ARRIVAL_AIRPORT = createField(DSL.name("arrival_airport"), SQLDataType.CHAR(3).nullable(false), this, "Airport of arrival");

    /**
     * The column <code>bookings.flights.status</code>. Flight status
     */
    public final TableField<FlightsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "Flight status");

    /**
     * The column <code>bookings.flights.aircraft_code</code>. Aircraft code,
     * IATA
     */
    public final TableField<FlightsRecord, String> AIRCRAFT_CODE = createField(DSL.name("aircraft_code"), SQLDataType.CHAR(3).nullable(false), this, "Aircraft code, IATA");

    /**
     * The column <code>bookings.flights.actual_departure</code>. Actual
     * departure time
     */
    public final TableField<FlightsRecord, OffsetDateTime> ACTUAL_DEPARTURE = createField(DSL.name("actual_departure"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Actual departure time");

    /**
     * The column <code>bookings.flights.actual_arrival</code>. Actual arrival
     * time
     */
    public final TableField<FlightsRecord, OffsetDateTime> ACTUAL_ARRIVAL = createField(DSL.name("actual_arrival"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Actual arrival time");

    private Flights(Name alias, Table<FlightsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Flights(Name alias, Table<FlightsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Flights"), TableOptions.table());
    }

    /**
     * Create an aliased <code>bookings.flights</code> table reference
     */
    public Flights(String alias) {
        this(DSL.name(alias), FLIGHTS);
    }

    /**
     * Create an aliased <code>bookings.flights</code> table reference
     */
    public Flights(Name alias) {
        this(alias, FLIGHTS);
    }

    /**
     * Create a <code>bookings.flights</code> table reference
     */
    public Flights() {
        this(DSL.name("flights"), null);
    }

    public <O extends Record> Flights(Table<O> child, ForeignKey<O, FlightsRecord> key) {
        super(child, key, FLIGHTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public Identity<FlightsRecord, Integer> getIdentity() {
        return (Identity<FlightsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FlightsRecord> getPrimaryKey() {
        return Keys.FLIGHTS_PKEY;
    }

    @Override
    public List<UniqueKey<FlightsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FLIGHTS_FLIGHT_NO_SCHEDULED_DEPARTURE_KEY);
    }

    @Override
    public List<ForeignKey<FlightsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FLIGHTS__FLIGHTS_DEPARTURE_AIRPORT_FKEY, Keys.FLIGHTS__FLIGHTS_ARRIVAL_AIRPORT_FKEY, Keys.FLIGHTS__FLIGHTS_AIRCRAFT_CODE_FKEY);
    }

    private transient AirportsData _flightsDepartureAirportFkey;
    private transient AirportsData _flightsArrivalAirportFkey;
    private transient AircraftsData _aircraftsData;

    /**
     * Get the implicit join path to the <code>bookings.airports_data</code>
     * table, via the <code>flights_departure_airport_fkey</code> key.
     */
    public AirportsData flightsDepartureAirportFkey() {
        if (_flightsDepartureAirportFkey == null)
            _flightsDepartureAirportFkey = new AirportsData(this, Keys.FLIGHTS__FLIGHTS_DEPARTURE_AIRPORT_FKEY);

        return _flightsDepartureAirportFkey;
    }

    /**
     * Get the implicit join path to the <code>bookings.airports_data</code>
     * table, via the <code>flights_arrival_airport_fkey</code> key.
     */
    public AirportsData flightsArrivalAirportFkey() {
        if (_flightsArrivalAirportFkey == null)
            _flightsArrivalAirportFkey = new AirportsData(this, Keys.FLIGHTS__FLIGHTS_ARRIVAL_AIRPORT_FKEY);

        return _flightsArrivalAirportFkey;
    }

    /**
     * Get the implicit join path to the <code>bookings.aircrafts_data</code>
     * table.
     */
    public AircraftsData aircraftsData() {
        if (_aircraftsData == null)
            _aircraftsData = new AircraftsData(this, Keys.FLIGHTS__FLIGHTS_AIRCRAFT_CODE_FKEY);

        return _aircraftsData;
    }

    @Override
    public List<Check<FlightsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("flights_check"), "((scheduled_arrival > scheduled_departure))", true),
            Internal.createCheck(this, DSL.name("flights_check1"), "(((actual_arrival IS NULL) OR ((actual_departure IS NOT NULL) AND (actual_arrival IS NOT NULL) AND (actual_arrival > actual_departure))))", true),
            Internal.createCheck(this, DSL.name("flights_status_check"), "(((status)::text = ANY (ARRAY[('On Time'::character varying)::text, ('Delayed'::character varying)::text, ('Departed'::character varying)::text, ('Arrived'::character varying)::text, ('Scheduled'::character varying)::text, ('Cancelled'::character varying)::text])))", true)
        );
    }

    @Override
    public Flights as(String alias) {
        return new Flights(DSL.name(alias), this);
    }

    @Override
    public Flights as(Name alias) {
        return new Flights(alias, this);
    }

    @Override
    public Flights as(Table<?> alias) {
        return new Flights(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Flights rename(String name) {
        return new Flights(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flights rename(Name name) {
        return new Flights(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flights rename(Table<?> name) {
        return new Flights(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, OffsetDateTime, OffsetDateTime, String, String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
