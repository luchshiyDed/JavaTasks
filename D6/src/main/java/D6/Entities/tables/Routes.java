/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.RoutesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;


/**
 * Routes
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routes extends TableImpl<RoutesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.routes</code>
     */
    public static final Routes ROUTES = new Routes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoutesRecord> getRecordType() {
        return RoutesRecord.class;
    }

    /**
     * The column <code>bookings.routes.flight_no</code>. Flight number
     */
    public final TableField<RoutesRecord, String> FLIGHT_NO = createField(DSL.name("flight_no"), SQLDataType.CHAR(6), this, "Flight number");

    /**
     * The column <code>bookings.routes.departure_airport</code>. Code of
     * airport of departure
     */
    public final TableField<RoutesRecord, String> DEPARTURE_AIRPORT = createField(DSL.name("departure_airport"), SQLDataType.CHAR(3), this, "Code of airport of departure");

    /**
     * The column <code>bookings.routes.departure_airport_name</code>. Name of
     * airport of departure
     */
    public final TableField<RoutesRecord, String> DEPARTURE_AIRPORT_NAME = createField(DSL.name("departure_airport_name"), SQLDataType.CLOB, this, "Name of airport of departure");

    /**
     * The column <code>bookings.routes.departure_city</code>. City of departure
     */
    public final TableField<RoutesRecord, String> DEPARTURE_CITY = createField(DSL.name("departure_city"), SQLDataType.CLOB, this, "City of departure");

    /**
     * The column <code>bookings.routes.arrival_airport</code>. Code of airport
     * of arrival
     */
    public final TableField<RoutesRecord, String> ARRIVAL_AIRPORT = createField(DSL.name("arrival_airport"), SQLDataType.CHAR(3), this, "Code of airport of arrival");

    /**
     * The column <code>bookings.routes.arrival_airport_name</code>. Name of
     * airport of arrival
     */
    public final TableField<RoutesRecord, String> ARRIVAL_AIRPORT_NAME = createField(DSL.name("arrival_airport_name"), SQLDataType.CLOB, this, "Name of airport of arrival");

    /**
     * The column <code>bookings.routes.arrival_city</code>. City of arrival
     */
    public final TableField<RoutesRecord, String> ARRIVAL_CITY = createField(DSL.name("arrival_city"), SQLDataType.CLOB, this, "City of arrival");

    /**
     * The column <code>bookings.routes.aircraft_code</code>. Aircraft code,
     * IATA
     */
    public final TableField<RoutesRecord, String> AIRCRAFT_CODE = createField(DSL.name("aircraft_code"), SQLDataType.CHAR(3), this, "Aircraft code, IATA");

    /**
     * The column <code>bookings.routes.duration</code>. Scheduled duration of
     * flight
     */
    public final TableField<RoutesRecord, YearToSecond> DURATION = createField(DSL.name("duration"), SQLDataType.INTERVAL, this, "Scheduled duration of flight");

    /**
     * The column <code>bookings.routes.days_of_week</code>. Days of week on
     * which flights are scheduled
     */
    public final TableField<RoutesRecord, Integer[]> DAYS_OF_WEEK = createField(DSL.name("days_of_week"), SQLDataType.INTEGER.array(), this, "Days of week on which flights are scheduled");

    private Routes(Name alias, Table<RoutesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Routes(Name alias, Table<RoutesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Routes"), TableOptions.view("""
        create view "routes" as  WITH f3 AS (
                SELECT f2.flight_no,
                   f2.departure_airport,
                   f2.arrival_airport,
                   f2.aircraft_code,
                   f2.duration,
                   array_agg(f2.days_of_week) AS days_of_week
                  FROM ( SELECT f1.flight_no,
                           f1.departure_airport,
                           f1.arrival_airport,
                           f1.aircraft_code,
                           f1.duration,
                           f1.days_of_week
                          FROM ( SELECT flights.flight_no,
                                   flights.departure_airport,
                                   flights.arrival_airport,
                                   flights.aircraft_code,
                                   (flights.scheduled_arrival - flights.scheduled_departure) AS duration,
                                   (to_char(flights.scheduled_departure, 'ID'::text))::integer AS days_of_week
                                  FROM flights) f1
                         GROUP BY f1.flight_no, f1.departure_airport, f1.arrival_airport, f1.aircraft_code, f1.duration, f1.days_of_week
                         ORDER BY f1.flight_no, f1.departure_airport, f1.arrival_airport, f1.aircraft_code, f1.duration, f1.days_of_week) f2
                 GROUP BY f2.flight_no, f2.departure_airport, f2.arrival_airport, f2.aircraft_code, f2.duration
               )
        SELECT f3.flight_no,
           f3.departure_airport,
           dep.airport_name AS departure_airport_name,
           dep.city AS departure_city,
           f3.arrival_airport,
           arr.airport_name AS arrival_airport_name,
           arr.city AS arrival_city,
           f3.aircraft_code,
           f3.duration,
           f3.days_of_week
          FROM f3,
           airports dep,
           airports arr
         WHERE ((f3.departure_airport = dep.airport_code) AND (f3.arrival_airport = arr.airport_code));
        """));
    }

    /**
     * Create an aliased <code>bookings.routes</code> table reference
     */
    public Routes(String alias) {
        this(DSL.name(alias), ROUTES);
    }

    /**
     * Create an aliased <code>bookings.routes</code> table reference
     */
    public Routes(Name alias) {
        this(alias, ROUTES);
    }

    /**
     * Create a <code>bookings.routes</code> table reference
     */
    public Routes() {
        this(DSL.name("routes"), null);
    }

    public <O extends Record> Routes(Table<O> child, ForeignKey<O, RoutesRecord> key) {
        super(child, key, ROUTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public Routes as(String alias) {
        return new Routes(DSL.name(alias), this);
    }

    @Override
    public Routes as(Name alias) {
        return new Routes(alias, this);
    }

    @Override
    public Routes as(Table<?> alias) {
        return new Routes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Routes rename(String name) {
        return new Routes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Routes rename(Name name) {
        return new Routes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Routes rename(Table<?> name) {
        return new Routes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, String, String, YearToSecond, Integer[]> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super YearToSecond, ? super Integer[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super YearToSecond, ? super Integer[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
