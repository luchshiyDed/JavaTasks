/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables.records;


import D6.Entities.tables.Flights;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Flights
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlightsRecord extends UpdatableRecordImpl<FlightsRecord> implements Record10<Integer, String, OffsetDateTime, OffsetDateTime, String, String, String, String, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>bookings.flights.flight_id</code>. Flight ID
     */
    public void setFlightId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>bookings.flights.flight_id</code>. Flight ID
     */
    public Integer getFlightId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>bookings.flights.flight_no</code>. Flight number
     */
    public void setFlightNo(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bookings.flights.flight_no</code>. Flight number
     */
    public String getFlightNo() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bookings.flights.scheduled_departure</code>. Scheduled
     * departure time
     */
    public void setScheduledDeparture(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>bookings.flights.scheduled_departure</code>. Scheduled
     * departure time
     */
    public OffsetDateTime getScheduledDeparture() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>bookings.flights.scheduled_arrival</code>. Scheduled
     * arrival time
     */
    public void setScheduledArrival(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>bookings.flights.scheduled_arrival</code>. Scheduled
     * arrival time
     */
    public OffsetDateTime getScheduledArrival() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>bookings.flights.departure_airport</code>. Airport of
     * departure
     */
    public void setDepartureAirport(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>bookings.flights.departure_airport</code>. Airport of
     * departure
     */
    public String getDepartureAirport() {
        return (String) get(4);
    }

    /**
     * Setter for <code>bookings.flights.arrival_airport</code>. Airport of
     * arrival
     */
    public void setArrivalAirport(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>bookings.flights.arrival_airport</code>. Airport of
     * arrival
     */
    public String getArrivalAirport() {
        return (String) get(5);
    }

    /**
     * Setter for <code>bookings.flights.status</code>. Flight status
     */
    public void setStatus(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>bookings.flights.status</code>. Flight status
     */
    public String getStatus() {
        return (String) get(6);
    }

    /**
     * Setter for <code>bookings.flights.aircraft_code</code>. Aircraft code,
     * IATA
     */
    public void setAircraftCode(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>bookings.flights.aircraft_code</code>. Aircraft code,
     * IATA
     */
    public String getAircraftCode() {
        return (String) get(7);
    }

    /**
     * Setter for <code>bookings.flights.actual_departure</code>. Actual
     * departure time
     */
    public void setActualDeparture(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>bookings.flights.actual_departure</code>. Actual
     * departure time
     */
    public OffsetDateTime getActualDeparture() {
        return (OffsetDateTime) get(8);
    }

    /**
     * Setter for <code>bookings.flights.actual_arrival</code>. Actual arrival
     * time
     */
    public void setActualArrival(OffsetDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>bookings.flights.actual_arrival</code>. Actual arrival
     * time
     */
    public OffsetDateTime getActualArrival() {
        return (OffsetDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, OffsetDateTime, OffsetDateTime, String, String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Integer, String, OffsetDateTime, OffsetDateTime, String, String, String, String, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Flights.FLIGHTS.FLIGHT_ID;
    }

    @Override
    public Field<String> field2() {
        return Flights.FLIGHTS.FLIGHT_NO;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Flights.FLIGHTS.SCHEDULED_DEPARTURE;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Flights.FLIGHTS.SCHEDULED_ARRIVAL;
    }

    @Override
    public Field<String> field5() {
        return Flights.FLIGHTS.DEPARTURE_AIRPORT;
    }

    @Override
    public Field<String> field6() {
        return Flights.FLIGHTS.ARRIVAL_AIRPORT;
    }

    @Override
    public Field<String> field7() {
        return Flights.FLIGHTS.STATUS;
    }

    @Override
    public Field<String> field8() {
        return Flights.FLIGHTS.AIRCRAFT_CODE;
    }

    @Override
    public Field<OffsetDateTime> field9() {
        return Flights.FLIGHTS.ACTUAL_DEPARTURE;
    }

    @Override
    public Field<OffsetDateTime> field10() {
        return Flights.FLIGHTS.ACTUAL_ARRIVAL;
    }

    @Override
    public Integer component1() {
        return getFlightId();
    }

    @Override
    public String component2() {
        return getFlightNo();
    }

    @Override
    public OffsetDateTime component3() {
        return getScheduledDeparture();
    }

    @Override
    public OffsetDateTime component4() {
        return getScheduledArrival();
    }

    @Override
    public String component5() {
        return getDepartureAirport();
    }

    @Override
    public String component6() {
        return getArrivalAirport();
    }

    @Override
    public String component7() {
        return getStatus();
    }

    @Override
    public String component8() {
        return getAircraftCode();
    }

    @Override
    public OffsetDateTime component9() {
        return getActualDeparture();
    }

    @Override
    public OffsetDateTime component10() {
        return getActualArrival();
    }

    @Override
    public Integer value1() {
        return getFlightId();
    }

    @Override
    public String value2() {
        return getFlightNo();
    }

    @Override
    public OffsetDateTime value3() {
        return getScheduledDeparture();
    }

    @Override
    public OffsetDateTime value4() {
        return getScheduledArrival();
    }

    @Override
    public String value5() {
        return getDepartureAirport();
    }

    @Override
    public String value6() {
        return getArrivalAirport();
    }

    @Override
    public String value7() {
        return getStatus();
    }

    @Override
    public String value8() {
        return getAircraftCode();
    }

    @Override
    public OffsetDateTime value9() {
        return getActualDeparture();
    }

    @Override
    public OffsetDateTime value10() {
        return getActualArrival();
    }

    @Override
    public FlightsRecord value1(Integer value) {
        setFlightId(value);
        return this;
    }

    @Override
    public FlightsRecord value2(String value) {
        setFlightNo(value);
        return this;
    }

    @Override
    public FlightsRecord value3(OffsetDateTime value) {
        setScheduledDeparture(value);
        return this;
    }

    @Override
    public FlightsRecord value4(OffsetDateTime value) {
        setScheduledArrival(value);
        return this;
    }

    @Override
    public FlightsRecord value5(String value) {
        setDepartureAirport(value);
        return this;
    }

    @Override
    public FlightsRecord value6(String value) {
        setArrivalAirport(value);
        return this;
    }

    @Override
    public FlightsRecord value7(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public FlightsRecord value8(String value) {
        setAircraftCode(value);
        return this;
    }

    @Override
    public FlightsRecord value9(OffsetDateTime value) {
        setActualDeparture(value);
        return this;
    }

    @Override
    public FlightsRecord value10(OffsetDateTime value) {
        setActualArrival(value);
        return this;
    }

    @Override
    public FlightsRecord values(Integer value1, String value2, OffsetDateTime value3, OffsetDateTime value4, String value5, String value6, String value7, String value8, OffsetDateTime value9, OffsetDateTime value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FlightsRecord
     */
    public FlightsRecord() {
        super(Flights.FLIGHTS);
    }

    /**
     * Create a detached, initialised FlightsRecord
     */
    public FlightsRecord(Integer flightId, String flightNo, OffsetDateTime scheduledDeparture, OffsetDateTime scheduledArrival, String departureAirport, String arrivalAirport, String status, String aircraftCode, OffsetDateTime actualDeparture, OffsetDateTime actualArrival) {
        super(Flights.FLIGHTS);

        setFlightId(flightId);
        setFlightNo(flightNo);
        setScheduledDeparture(scheduledDeparture);
        setScheduledArrival(scheduledArrival);
        setDepartureAirport(departureAirport);
        setArrivalAirport(arrivalAirport);
        setStatus(status);
        setAircraftCode(aircraftCode);
        setActualDeparture(actualDeparture);
        setActualArrival(actualArrival);
    }
}
