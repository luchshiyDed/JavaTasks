/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables.records;


import D6.Entities.tables.Aircrafts;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * Aircrafts
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AircraftsRecord extends TableRecordImpl<AircraftsRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>bookings.aircrafts.aircraft_code</code>. Aircraft code,
     * IATA
     */
    public void setAircraftCode(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>bookings.aircrafts.aircraft_code</code>. Aircraft code,
     * IATA
     */
    public String getAircraftCode() {
        return (String) get(0);
    }

    /**
     * Setter for <code>bookings.aircrafts.model</code>. Aircraft model
     */
    public void setModel(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bookings.aircrafts.model</code>. Aircraft model
     */
    public String getModel() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bookings.aircrafts.range</code>. Maximal flying
     * distance, km
     */
    public void setRange(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>bookings.aircrafts.range</code>. Maximal flying
     * distance, km
     */
    public Integer getRange() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Aircrafts.AIRCRAFTS.AIRCRAFT_CODE;
    }

    @Override
    public Field<String> field2() {
        return Aircrafts.AIRCRAFTS.MODEL;
    }

    @Override
    public Field<Integer> field3() {
        return Aircrafts.AIRCRAFTS.RANGE;
    }

    @Override
    public String component1() {
        return getAircraftCode();
    }

    @Override
    public String component2() {
        return getModel();
    }

    @Override
    public Integer component3() {
        return getRange();
    }

    @Override
    public String value1() {
        return getAircraftCode();
    }

    @Override
    public String value2() {
        return getModel();
    }

    @Override
    public Integer value3() {
        return getRange();
    }

    @Override
    public AircraftsRecord value1(String value) {
        setAircraftCode(value);
        return this;
    }

    @Override
    public AircraftsRecord value2(String value) {
        setModel(value);
        return this;
    }

    @Override
    public AircraftsRecord value3(Integer value) {
        setRange(value);
        return this;
    }

    @Override
    public AircraftsRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AircraftsRecord
     */
    public AircraftsRecord() {
        super(Aircrafts.AIRCRAFTS);
    }

    /**
     * Create a detached, initialised AircraftsRecord
     */
    public AircraftsRecord(String aircraftCode, String model, Integer range) {
        super(Aircrafts.AIRCRAFTS);

        setAircraftCode(aircraftCode);
        setModel(model);
        setRange(range);
    }
}
