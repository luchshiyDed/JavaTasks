/*
 * This file is generated by jOOQ.
 */
package D6.Entities.tables;


import D6.Entities.Bookings;
import D6.Entities.tables.records.AirportsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Airports
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Airports extends TableImpl<AirportsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookings.airports</code>
     */
    public static final Airports AIRPORTS = new Airports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AirportsRecord> getRecordType() {
        return AirportsRecord.class;
    }

    /**
     * The column <code>bookings.airports.airport_code</code>. Airport code
     */
    public final TableField<AirportsRecord, String> AIRPORT_CODE = createField(DSL.name("airport_code"), SQLDataType.CHAR(3), this, "Airport code");

    /**
     * The column <code>bookings.airports.airport_name</code>. Airport name
     */
    public final TableField<AirportsRecord, String> AIRPORT_NAME = createField(DSL.name("airport_name"), SQLDataType.CLOB, this, "Airport name");

    /**
     * The column <code>bookings.airports.city</code>. City
     */
    public final TableField<AirportsRecord, String> CITY = createField(DSL.name("city"), SQLDataType.CLOB, this, "City");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<AirportsRecord, Object> COORDINATES = createField(DSL.name("coordinates"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"point\""), this, "Airport coordinates (longitude and latitude)");

    /**
     * The column <code>bookings.airports.timezone</code>. Airport time zone
     */
    public final TableField<AirportsRecord, String> TIMEZONE = createField(DSL.name("timezone"), SQLDataType.CLOB, this, "Airport time zone");

    private Airports(Name alias, Table<AirportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Airports(Name alias, Table<AirportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Airports"), TableOptions.view("""
        create view "airports" as  SELECT ml.airport_code,
         (ml.airport_name ->> lang()) AS airport_name,
         (ml.city ->> lang()) AS city,
         ml.coordinates,
         ml.timezone
        FROM airports_data ml;
        """));
    }

    /**
     * Create an aliased <code>bookings.airports</code> table reference
     */
    public Airports(String alias) {
        this(DSL.name(alias), AIRPORTS);
    }

    /**
     * Create an aliased <code>bookings.airports</code> table reference
     */
    public Airports(Name alias) {
        this(alias, AIRPORTS);
    }

    /**
     * Create a <code>bookings.airports</code> table reference
     */
    public Airports() {
        this(DSL.name("airports"), null);
    }

    public <O extends Record> Airports(Table<O> child, ForeignKey<O, AirportsRecord> key) {
        super(child, key, AIRPORTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookings.BOOKINGS;
    }

    @Override
    public Airports as(String alias) {
        return new Airports(DSL.name(alias), this);
    }

    @Override
    public Airports as(Name alias) {
        return new Airports(alias, this);
    }

    @Override
    public Airports as(Table<?> alias) {
        return new Airports(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Airports rename(String name) {
        return new Airports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Airports rename(Name name) {
        return new Airports(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Airports rename(Table<?> name) {
        return new Airports(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Object, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Object, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Object, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
