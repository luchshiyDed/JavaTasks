/*
 * This file is generated by jOOQ.
 */
package D6.Entities;


import D6.Entities.tables.Bookings;
import D6.Entities.tables.AircraftsData;
import D6.Entities.tables.AirportsData;
import D6.Entities.tables.BoardingPasses;
import D6.Entities.tables.Flights;
import D6.Entities.tables.Seats;
import D6.Entities.tables.TicketFlights;
import D6.Entities.tables.Tickets;
import D6.Entities.tables.records.AircraftsDataRecord;
import D6.Entities.tables.records.AirportsDataRecord;
import D6.Entities.tables.records.BoardingPassesRecord;
import D6.Entities.tables.records.BookingsRecord;
import D6.Entities.tables.records.FlightsRecord;
import D6.Entities.tables.records.SeatsRecord;
import D6.Entities.tables.records.TicketFlightsRecord;
import D6.Entities.tables.records.TicketsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * bookings.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AircraftsDataRecord> AIRCRAFTS_PKEY = Internal.createUniqueKey(AircraftsData.AIRCRAFTS_DATA, DSL.name("aircrafts_pkey"), new TableField[] { AircraftsData.AIRCRAFTS_DATA.AIRCRAFT_CODE }, true);
    public static final UniqueKey<AirportsDataRecord> AIRPORTS_DATA_PKEY = Internal.createUniqueKey(AirportsData.AIRPORTS_DATA, DSL.name("airports_data_pkey"), new TableField[] { AirportsData.AIRPORTS_DATA.AIRPORT_CODE }, true);
    public static final UniqueKey<BoardingPassesRecord> BOARDING_PASSES_FLIGHT_ID_BOARDING_NO_KEY = Internal.createUniqueKey(BoardingPasses.BOARDING_PASSES, DSL.name("boarding_passes_flight_id_boarding_no_key"), new TableField[] { BoardingPasses.BOARDING_PASSES.FLIGHT_ID, BoardingPasses.BOARDING_PASSES.BOARDING_NO }, true);
    public static final UniqueKey<BoardingPassesRecord> BOARDING_PASSES_FLIGHT_ID_SEAT_NO_KEY = Internal.createUniqueKey(BoardingPasses.BOARDING_PASSES, DSL.name("boarding_passes_flight_id_seat_no_key"), new TableField[] { BoardingPasses.BOARDING_PASSES.FLIGHT_ID, BoardingPasses.BOARDING_PASSES.SEAT_NO }, true);
    public static final UniqueKey<BoardingPassesRecord> BOARDING_PASSES_PKEY = Internal.createUniqueKey(BoardingPasses.BOARDING_PASSES, DSL.name("boarding_passes_pkey"), new TableField[] { BoardingPasses.BOARDING_PASSES.TICKET_NO, BoardingPasses.BOARDING_PASSES.FLIGHT_ID }, true);
    public static final UniqueKey<BookingsRecord> BOOKINGS_PKEY = Internal.createUniqueKey(D6.Entities.tables.Bookings.BOOKINGS_, DSL.name("bookings_pkey"), new TableField[] { D6.Entities.tables.Bookings.BOOKINGS_.BOOK_REF }, true);
    public static final UniqueKey<FlightsRecord> FLIGHTS_FLIGHT_NO_SCHEDULED_DEPARTURE_KEY = Internal.createUniqueKey(Flights.FLIGHTS, DSL.name("flights_flight_no_scheduled_departure_key"), new TableField[] { Flights.FLIGHTS.FLIGHT_NO, Flights.FLIGHTS.SCHEDULED_DEPARTURE }, true);
    public static final UniqueKey<FlightsRecord> FLIGHTS_PKEY = Internal.createUniqueKey(Flights.FLIGHTS, DSL.name("flights_pkey"), new TableField[] { Flights.FLIGHTS.FLIGHT_ID }, true);
    public static final UniqueKey<SeatsRecord> SEATS_PKEY = Internal.createUniqueKey(Seats.SEATS, DSL.name("seats_pkey"), new TableField[] { Seats.SEATS.AIRCRAFT_CODE, Seats.SEATS.SEAT_NO }, true);
    public static final UniqueKey<TicketFlightsRecord> TICKET_FLIGHTS_PKEY = Internal.createUniqueKey(TicketFlights.TICKET_FLIGHTS, DSL.name("ticket_flights_pkey"), new TableField[] { TicketFlights.TICKET_FLIGHTS.TICKET_NO, TicketFlights.TICKET_FLIGHTS.FLIGHT_ID }, true);
    public static final UniqueKey<TicketsRecord> TICKETS_PKEY = Internal.createUniqueKey(Tickets.TICKETS, DSL.name("tickets_pkey"), new TableField[] { Tickets.TICKETS.TICKET_NO }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BoardingPassesRecord, TicketFlightsRecord> BOARDING_PASSES__BOARDING_PASSES_TICKET_NO_FKEY = Internal.createForeignKey(BoardingPasses.BOARDING_PASSES, DSL.name("boarding_passes_ticket_no_fkey"), new TableField[] { BoardingPasses.BOARDING_PASSES.TICKET_NO, BoardingPasses.BOARDING_PASSES.FLIGHT_ID }, Keys.TICKET_FLIGHTS_PKEY, new TableField[] { TicketFlights.TICKET_FLIGHTS.TICKET_NO, TicketFlights.TICKET_FLIGHTS.FLIGHT_ID }, true);
    public static final ForeignKey<FlightsRecord, AircraftsDataRecord> FLIGHTS__FLIGHTS_AIRCRAFT_CODE_FKEY = Internal.createForeignKey(Flights.FLIGHTS, DSL.name("flights_aircraft_code_fkey"), new TableField[] { Flights.FLIGHTS.AIRCRAFT_CODE }, Keys.AIRCRAFTS_PKEY, new TableField[] { AircraftsData.AIRCRAFTS_DATA.AIRCRAFT_CODE }, true);
    public static final ForeignKey<FlightsRecord, AirportsDataRecord> FLIGHTS__FLIGHTS_ARRIVAL_AIRPORT_FKEY = Internal.createForeignKey(Flights.FLIGHTS, DSL.name("flights_arrival_airport_fkey"), new TableField[] { Flights.FLIGHTS.ARRIVAL_AIRPORT }, Keys.AIRPORTS_DATA_PKEY, new TableField[] { AirportsData.AIRPORTS_DATA.AIRPORT_CODE }, true);
    public static final ForeignKey<FlightsRecord, AirportsDataRecord> FLIGHTS__FLIGHTS_DEPARTURE_AIRPORT_FKEY = Internal.createForeignKey(Flights.FLIGHTS, DSL.name("flights_departure_airport_fkey"), new TableField[] { Flights.FLIGHTS.DEPARTURE_AIRPORT }, Keys.AIRPORTS_DATA_PKEY, new TableField[] { AirportsData.AIRPORTS_DATA.AIRPORT_CODE }, true);
    public static final ForeignKey<SeatsRecord, AircraftsDataRecord> SEATS__SEATS_AIRCRAFT_CODE_FKEY = Internal.createForeignKey(Seats.SEATS, DSL.name("seats_aircraft_code_fkey"), new TableField[] { Seats.SEATS.AIRCRAFT_CODE }, Keys.AIRCRAFTS_PKEY, new TableField[] { AircraftsData.AIRCRAFTS_DATA.AIRCRAFT_CODE }, true);
    public static final ForeignKey<TicketFlightsRecord, FlightsRecord> TICKET_FLIGHTS__TICKET_FLIGHTS_FLIGHT_ID_FKEY = Internal.createForeignKey(TicketFlights.TICKET_FLIGHTS, DSL.name("ticket_flights_flight_id_fkey"), new TableField[] { TicketFlights.TICKET_FLIGHTS.FLIGHT_ID }, Keys.FLIGHTS_PKEY, new TableField[] { Flights.FLIGHTS.FLIGHT_ID }, true);
    public static final ForeignKey<TicketFlightsRecord, TicketsRecord> TICKET_FLIGHTS__TICKET_FLIGHTS_TICKET_NO_FKEY = Internal.createForeignKey(TicketFlights.TICKET_FLIGHTS, DSL.name("ticket_flights_ticket_no_fkey"), new TableField[] { TicketFlights.TICKET_FLIGHTS.TICKET_NO }, Keys.TICKETS_PKEY, new TableField[] { Tickets.TICKETS.TICKET_NO }, true);
    public static final ForeignKey<TicketsRecord, BookingsRecord> TICKETS__TICKETS_BOOK_REF_FKEY = Internal.createForeignKey(Tickets.TICKETS, DSL.name("tickets_book_ref_fkey"), new TableField[] { Tickets.TICKETS.BOOK_REF }, Keys.BOOKINGS_PKEY, new TableField[] { Bookings.BOOKINGS_.BOOK_REF }, true);
}
